import numpy as np

#1.1Создание одномерного списка из обычного списка
myList = [1,2,3]
#Тип - <class 'list'>
print(type(myList))
#Тип - <class 'numpy.ndarray'>
print(type(np.array(myList)))

#1.2Создание двухмерного списка из обычного списка
my_matrix = [[1,2,3],[4,5,6],[7,8,9]]
#Вывод двумерного массива в numpy:
#[[1 2 3]
#[4 5 6]
#[7 8 9]]
print(np.array(my_matrix))

#2.1 Создание списка в numpy - создание списка от 0 до 100 с шагом 2
np.arange(0,101,2)

#2.2 Создание одномерной матрицы из нулей [Нули с плавающей точкой]
np.zeros(5)

#2.2 Создание двумерной матрицы из нулей [Нули с плавающей точкой]
#Первое число - количество строк
#Второе число - количество колонок
np.zeros((5,5))

#2.3 Создание одномерной матрицы из единиц [Единицы с плавающей точкой]
np.ones(5)

#2.4 Создание списка где все экземпляры равноудалены друг от друга - [0. 1. 2. 3. 4. 5.]
#0 - начальная граница
#5 - конечная граница
#6 - количество элементов
#!ВАЖНО! - Эта функция включает внешние границы
np.linspace(0,5,6)

#2.5 Создание единичной матрицы [равносторонней матрицы с единицами по главной диагонали]
#[[1. 0.]
# [0. 1.]]
np.eye(2)

#2.6 Создание массива случ чисел с заданным количеством элементов - [0.84074436 0.59604339]
#Вероятность генерации числа задана РАВНОМЕРНЫМ РАСПРЕДЕЛЕНИЕМ, то есть вероятность попадания числа всегда одна и та же
np.random.random(2)

#2.7 Создание массива случ чисел с заданным количеством элементов - [-1.97733166 -1.68145527 -0.11310604 -0.599104    0.01347721]
#Вероятность генерации числа задана НОРМАЛЬНЫМ РАСПРЕДЕЛЕНИЕМ, то есть вероятность попадания числа подвержена нормальному распределению
#Чем ближе число к 0 - тем больше вероятность получить его
#Чем дальше число от 0 (в ту или другую сторону) - тем меньше вероятность его получить
np.random.randn(5)

#2.7 Создание массива целых случайных чисел - [16 27 45]
np.random.randint(0,100,3)

#2.8 Генерация случайных чисел, которые можно воспроизвести - [0.37454012 0.95071431 0.73199394 0.59865848]
#БУДУТ ТАКИЕ ВСЕГДА при seed - 42
np.random.seed(42)
np.random.rand(4)


#3.1 Помещение списка в матрицу заданных размеров
#[[ 0  1  2  3  4]
# [ 5  6  7  8  9]
# [10 11 12 13 14]
# [15 16 17 18 19]
# [20 21 22 23 24]]
arr = np.arange(0,25)
npArr = arr.reshape(5,5)

#3.2 Максимальное значение в списке - 24
npArr.max()

#3.3 Индекс максимального числа - 24
npArr.argmax()

#3.4 Тип данных в массиве - int32
npArr.dtype

#3.5 Размерность - (5, 5)
npArr.shape